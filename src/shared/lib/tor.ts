import { exec } from "child_process";

const TOR_CONTAINER_NAME = "tor_proxy"; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –∏–º—è –≤–∞—à–µ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞

const waitForContainerToBeHealthy = (containerName: string, timeout: number = 500000): Promise<void> => {
  return new Promise((resolve, reject) => {
    const startTime = Date.now();

    const checkContainerStatus = () => {
      exec(`docker inspect --format '{{.State.Health.Status}}' ${containerName}`, (error, stdout, stderr) => {
        if (error) {
          console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: ${stderr}`);
          return reject(error);
        }

        if (stdout.trim() === "healthy") {
          resolve();
        } else if (Date.now() - startTime > timeout) {
          reject(new Error(`Tor –Ω–µ —Å—Ç–∞–ª –∑–¥–æ—Ä–æ–≤—ã–º –≤ —Ç–µ—á–µ–Ω–∏–µ ${timeout / 1000} —Å–µ–∫—É–Ω–¥`));
        } else {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É, –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ —Å—Ç–∞–ª "healthy"
          setTimeout(checkContainerStatus, 1000);
        }
      });
    };

    checkContainerStatus();
  });
};

export const restartTor = async (maxRetries = 2): Promise<void> => {
  let attempt = 0;

  while (attempt < maxRetries) {
    attempt++;
    console.log(`‚öôÔ∏è –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ Tor (${attempt}/${maxRetries})`);

    try {
      await new Promise<void>((resolve, reject) => {
        exec(`docker restart ${TOR_CONTAINER_NAME}`, (error, stdout, stderr) => {
          if (error) {
            console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ Tor: ${stderr}`);
            return reject(error);
          }
          resolve();
        });
      });

      console.log("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ, –ø–æ–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å—Ç–∞–Ω–µ—Ç healthy...");
      await waitForContainerToBeHealthy(TOR_CONTAINER_NAME);
      console.log("‚úÖ Tor –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é");
      return; // –£—Å–ø–µ—à–Ω–æ, –≤—ã—Ö–æ–¥–∏–º
    } catch (err) {
      console.warn(`‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ ${attempt} –Ω–µ —É–¥–∞–ª–∞—Å—å: ${err}`);
      if (attempt >= maxRetries) {
        console.error("‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ Tor –Ω–µ —É–≤–µ–Ω—á–∞–ª–∏—Å—å —É—Å–ø–µ—Ö–æ–º");
        throw err;
      }

      console.log("üîÅ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞...");
    }
  }
};
