import { execSync } from "child_process";
import { config } from "dotenv";
import fs from "fs";
import path from "path";

config();

const { POSTGRES_USER, POSTGRES_DB, POSTGRES_CONTAINER, BACKUP_DIR } = process.env;

if (!POSTGRES_USER || !POSTGRES_DB || !POSTGRES_CONTAINER || !BACKUP_DIR) {
  console.error("–ù–µ –∑–∞–¥–∞–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è!");
  process.exit(1);
}

export const restoreLatestBackup = (backupPath?: string) => {
  const files = fs
    .readdirSync(BACKUP_DIR)
    .filter((file) => file.startsWith("backup_") && file.endsWith(".dump.bz2"))
    .sort()
    .reverse();
  if (files.length === 0) {
    console.error("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±—ç–∫–∞–ø–æ–≤!");
    process.exit(1);
  }

  const latestBackup = path.join(BACKUP_DIR, files[0]);

  try {
    console.log(`üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ ${latestBackup}...`);
    execSync(
      `bzcat ${backupPath ? backupPath : latestBackup} | docker exec -i ${POSTGRES_CONTAINER} pg_restore -U ${POSTGRES_USER} -d ${POSTGRES_DB} --clean --if-exists`,
      { stdio: "inherit" },
    );
    console.log("‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!");
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:", error);
  }
};
restoreLatestBackup();
