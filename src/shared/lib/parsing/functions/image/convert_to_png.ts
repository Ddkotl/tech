import sharp from "sharp";
import cv from "@techstark/opencv-js";

/**
 * –£–¥–∞–ª—è–µ—Ç —Ñ–æ–Ω –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –æ–ø—Ä–µ–¥–µ–ª—è—è –∫–æ–Ω—Ç—É—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.
 * @param file - –í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.
 * @param options - –û–ø—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.
 * @returns Promise<File> - PNG —Å –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º —Ñ–æ–Ω–æ–º.
 */
export const convertToPNG = async (file: File, options: { resizeWidth?: number } = {}): Promise<File> => {
  const { resizeWidth = 300 } = options;

  try {
    if (!file.type.startsWith("image/")) {
      throw new Error("–§–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º");
    }

    const arrayBuffer = await file.arrayBuffer();
    const buffer = Buffer.from(arrayBuffer);

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ sharp
    const { data, info } = await sharp(buffer)
      .ensureAlpha()
      .resize(resizeWidth)
      .raw()
      .toBuffer({ resolveWithObject: true });

    // console.log("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏:", info);

    // –°–æ–∑–¥–∞–µ–º –º–∞—Ç—Ä–∏—Ü—É OpenCV
    const src = new cv.Mat(info.height, info.width, cv.CV_8UC4);
    src.data.set(data);

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –≥—Ä–∞–¥–∞—Ü–∏–∏ —Å–µ—Ä–æ–≥–æ
    // console.log("–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –≥—Ä–∞–¥–∞—Ü–∏–∏ —Å–µ—Ä–æ–≥–æ...");
    const gray = new cv.Mat();
    cv.cvtColor(src, gray, cv.COLOR_RGBA2GRAY);

    // –ü—Ä–∏–º–µ–Ω—è–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –ø–æ—Ä–æ–≥ –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞
    // console.log("–ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ—Ä–æ–≥–æ–≤—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É...");
    const binary = new cv.Mat();
    cv.adaptiveThreshold(gray, binary, 255, cv.ADAPTIVE_THRESH_GAUSSIAN_C, cv.THRESH_BINARY_INV, 11, 2);

    // –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω—Ç—É—Ä—ã
    // console.log("–ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω—Ç—É—Ä—ã...");
    const contours = new cv.MatVector();
    const hierarchy = new cv.Mat();
    cv.findContours(binary, contours, hierarchy, cv.RETR_EXTERNAL, cv.CHAIN_APPROX_SIMPLE);

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∞–º—ã–π –±–æ–ª—å—à–æ–π –∫–æ–Ω—Ç—É—Ä
    // console.log("–ò—â–µ–º —Å–∞–º—ã–π –±–æ–ª—å—à–æ–π –∫–æ–Ω—Ç—É—Ä...");
    let maxArea = 0;
    let bestContour = null;
    for (let i = 0; i < contours.size(); i++) {
      const area = cv.contourArea(contours.get(i));
      if (area > maxArea) {
        maxArea = area;
        bestContour = contours.get(i);
      }
    }

    if (!bestContour) {
      throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–Ω—Ç—É—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.");
    }

    // –°–æ–∑–¥–∞–µ–º –º–∞—Å–∫—É
    // console.log("–°–æ–∑–¥–∞–µ–º –º–∞—Å–∫—É...");
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    //@ts-ignore
    const mask = new cv.Mat.zeros(src.rows, src.cols, cv.CV_8UC1);
    const matVector = new cv.MatVector();
    matVector.push_back(bestContour);
    cv.drawContours(mask, matVector, -1, new cv.Scalar(255), -1);

    // üîπ –†–∞—Å—à–∏—Ä—è–µ–º –∫–æ–Ω—Ç—É—Ä, —á—Ç–æ–±—ã –Ω–µ –æ–±—Ä–µ–∑–∞–ª–æ –∫—Ä–∞—è
    // console.log("–†–∞—Å—à–∏—Ä—è–µ–º –∫–æ–Ω—Ç—É—Ä...");
    const kernel = cv.Mat.ones(5, 5, cv.CV_8U); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä
    cv.dilate(mask, mask, kernel);

    // üîπ –†–∞–∑–º—ã—Ç–∏–µ –º–∞—Å–∫–∏ –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞
    // console.log("–°–≥–ª–∞–∂–∏–≤–∞–µ–º –∫—Ä–∞—è...");
    cv.GaussianBlur(mask, mask, new cv.Size(15, 15), 2);

    // üîπ –ò—Å–ø–æ–ª—å–∑—É–µ–º boundingRect, —á—Ç–æ–±—ã —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫—Ä–æ–ø–∏–Ω–≥
    // console.log("–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –≥—Ä–∞–Ω–∏—Ü—ã...");
    const boundingRect = cv.boundingRect(bestContour);
    boundingRect.x = Math.max(0, boundingRect.x - 5);
    boundingRect.y = Math.max(0, boundingRect.y - 5);
    boundingRect.width = Math.min(mask.cols - boundingRect.x, boundingRect.width + 15);
    boundingRect.height = Math.min(mask.rows - boundingRect.y, boundingRect.height + 20);

    // üîπ –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∞—Å–∫—É –∫ –∞–ª—å—Ñ–∞-–∫–∞–Ω–∞–ª—É
    // console.log("–ü—Ä–∏–º–µ–Ω—è–µ–º –º–∞—Å–∫—É –∫ –∞–ª—å—Ñ–∞-–∫–∞–Ω–∞–ª—É...");
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    //@ts-ignore
    const alpha = new cv.Mat.zeros(src.rows, src.cols, cv.CV_8UC1);
    mask.copyTo(alpha);

    // –°–æ–±–∏—Ä–∞–µ–º –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (RGBA)
    // console.log("–°–æ–±–∏—Ä–∞–µ–º –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...");
    const rgba = new cv.Mat();
    const rgbaChannels = new cv.MatVector();
    const rgbChannels = new cv.MatVector();
    cv.split(src, rgbChannels);

    rgbaChannels.push_back(rgbChannels.get(0)); // R
    rgbaChannels.push_back(rgbChannels.get(1)); // G
    rgbaChannels.push_back(rgbChannels.get(2)); // B
    rgbaChannels.push_back(alpha); // A (–ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å)

    cv.merge(rgbaChannels, rgba);

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞—Ç–Ω–æ –≤ PNG
    // console.log("–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ PNG...");
    const pngBuffer = await sharp(Buffer.from(rgba.data), {
      raw: {
        width: info.width,
        height: info.height,
        channels: 4,
      },
    })
      .png()
      .toBuffer();

    // –û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏
    src.delete();
    gray.delete();
    binary.delete();
    mask.delete();
    bestContour?.delete();
    contours.delete();
    hierarchy.delete();
    alpha.delete();
    rgba.delete();
    rgbaChannels.delete();
    rgbChannels.delete();

    return new File([new Blob([new Uint8Array(pngBuffer)])], file.name.replace(/\.[^.]+$/, ".png"), {
      type: "image/png",
      lastModified: Date.now(),
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:", error);
    throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${error}`);
  }
};
