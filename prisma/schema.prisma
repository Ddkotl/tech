generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name          String?
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  role          UserRoles @default(USER)
  accounts      Account[]
  sessions      Session[]

  newsDookmarks    NewsBookmark[]
  reviewsDookmarks ReviewsBookmark[]

  @@map("users")
}

model News {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  meta_title       String
  meta_description String

  slug         String   @unique
  title        String   @unique
  content      String
  previewImage String?  @map("preview_image")
  images       String[]

  views Int @default(0)

  bookmarks NewsBookmark[]

  tags Tag[] @relation("NewsTags")

  @@map("news")
}

model Tag {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  slug    String    @unique
  title   String    @unique
  news    News[]    @relation("NewsTags")
  reviews Reviews[] @relation("ReviewsTags")

  @@map("tags")
}

model Reviews {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  meta_title       String
  meta_description String

  slug         String   @unique
  title        String   @unique
  content      String
  previewImage String?  @map("preview_image")
  images       String[]
  views        Int      @default(0)

  phoneModelId String?           @map("phone_model_id")
  phoneModel   PhoneModels?      @relation(fields: [phoneModelId], references: [id], onDelete: SetNull)
  bookmarks    ReviewsBookmark[]

  tags Tag[] @relation("ReviewsTags")

  @@map("reviews")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String  @map("user_id")
  type                     String
  provider                 String
  providerAccountId        String  @map("provider_account_id")
  refresh_token            String? @db.Text
  refresh_token_expires_in Int?
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model NewsBookmark {
  id String @id @default(cuid())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  news   News   @relation(fields: [newsId], references: [id], onDelete: Cascade)
  newsId String @map("news_id")

  @@unique([userId, newsId])
  @@map("news_bookmarks")
}

model ReviewsBookmark {
  id String @id @default(cuid())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  reviews   Reviews @relation(fields: [reviewsId], references: [id])
  reviewsId String  @map("reviews_id")

  @@unique([userId, reviewsId])
  @@map("reviews_bookmarks")
}

model Brands {
  id        String        @id @default(cuid())
  name      String        @unique // Название бренда
  slug      String        @unique
  phones    PhoneModels[] // Модели телефонов, связанные с этим брендом
  createdAt DateTime      @default(now())

  @@map("brands")
}

model PhoneModels {
  id             String          @id @default(cuid())
  short_name     String          @unique // Название модели телефона
  full_name      String          @unique
  slug           String          @unique // URL-совместимый слаг для модели
  brandId        String          @map("brand_id") // Ссылка на бренд
  brand          Brands          @relation(fields: [brandId], references: [id], onDelete: Cascade) // Связь с брендом
  specifications Specification[] // Характеристики модели
  main_image     String
  createdAt      DateTime        @default(now())
  Reviews        Reviews[]

  @@map("phone_models")
}

model Specification {
  id String @id @default(cuid())

  images          String[]
  releaseDate     String // Дата релиза
  weight          String
  thickness       String
  oc              String
  storage         String
  ram             String
  processor       String
  screen_duim     String
  screen_px       String
  camera_photo    String
  camera_video    String
  batary_capasity String

  description String

  phoneModels  PhoneModels @relation(fields: [phoneModelId], references: [id], onDelete: Cascade)
  phoneModelId String // Ссылка на модель телефона

  @@map("specification")
}

model NewsParsedTitles {
  id    String @id @default(cuid())
  title String @unique
}

model ReviewsParsedTitles {
  id    String @id @default(cuid())
  title String @unique
}

enum UserRoles {
  USER
  ADMIN
}
